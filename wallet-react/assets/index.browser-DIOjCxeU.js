const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./loadCognitoIdentity-BIKsyjKh.js","./index-uEtFZs4I.js","./fetch-http-handler-haFO6OGU.js","./index-DRbKv4Ap.js","./index-WnVwkxgD.css","./noAuth-BRTlyyWt.js","./parseJsonBody-DW8NQnfc.js","./loadSts-D-zZVxtd.js","./index-BKMfXrzb.js"])))=>i.map(i=>d[i]);
import{ac as w}from"./index-DRbKv4Ap.js";import{t as E,a as P,b as _,H as O,p as x,F as N}from"./fetch-http-handler-haFO6OGU.js";const D=async e=>typeof Blob=="function"&&e instanceof Blob?new Uint8Array(await e.arrayBuffer()):K(e);async function K(e){const t=[],r=e.getReader();let n=!1,o=0;for(;!n;){const{done:a,value:c}=await r.read();c&&(t.push(c),o+=c.length),n=a}const s=new Uint8Array(o);let i=0;for(const a of t)s.set(a,i),i+=a.length;return s}const I=e=>{var t;return typeof ReadableStream=="function"&&(((t=e==null?void 0:e.constructor)==null?void 0:t.name)===ReadableStream.name||e instanceof ReadableStream)},S="The stream has already been transformed.",j=e=>{var o,s;if(!C(e)&&!I(e)){const i=((s=(o=e==null?void 0:e.__proto__)==null?void 0:o.constructor)==null?void 0:s.name)||e;throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${i}`)}let t=!1;const r=async()=>{if(t)throw new Error(S);return t=!0,await D(e)},n=i=>{if(typeof i.stream!="function")throw new Error(`Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.
If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body`);return i.stream()};return Object.assign(e,{transformToByteArray:r,transformToString:async i=>{const a=await r();if(i==="base64")return E(a);if(i==="hex")return P(a);if(i===void 0||i==="utf8"||i==="utf-8")return _(a);if(typeof TextDecoder=="function")return new TextDecoder(i).decode(a);throw new Error("TextDecoder is not available, please make sure polyfill is provided.")},transformToWebStream:()=>{if(t)throw new Error(S);if(t=!0,C(e))return n(e);if(I(e))return e;throw new Error(`Cannot transform payload to web stream, got ${e}`)}})},C=e=>typeof Blob=="function"&&e instanceof Blob;class p extends Error{constructor(t,r=!0){var s;let n,o=!0;typeof r=="boolean"?(n=void 0,o=r):r!=null&&typeof r=="object"&&(n=r.logger,o=r.tryNextLink??!0),super(t),this.name="ProviderError",this.tryNextLink=o,Object.setPrototypeOf(this,p.prototype),(s=n==null?void 0:n.debug)==null||s.call(n,`@smithy/property-provider ${o?"->":"(!)"} ${t}`)}static from(t,r=!0){return Object.assign(new this(t.message,r),t)}}class d extends p{constructor(t,r=!0){super(t,r),this.name="CredentialsProviderError",Object.setPrototypeOf(this,d.prototype)}}function T(e){return Promise.all(Object.keys(e).reduce((t,r)=>{const n=e[r];return typeof n=="string"?t.push([r,n]):t.push(n().then(o=>[r,o])),t},[])).then(t=>t.reduce((r,[n,o])=>(r[n]=o,r),{}))}function A(e){return async()=>{var a,c,l;(a=e.logger)==null||a.debug("@aws-sdk/credential-provider-cognito-identity - fromCognitoIdentity");const{GetCredentialsForIdentityCommand:t,CognitoIdentityClient:r}=await w(async()=>{const{GetCredentialsForIdentityCommand:u,CognitoIdentityClient:f}=await import("./loadCognitoIdentity-BIKsyjKh.js").then(m=>m.ah);return{GetCredentialsForIdentityCommand:u,CognitoIdentityClient:f}},__vite__mapDeps([0,1,2,3,4,5,6]),import.meta.url),{Credentials:{AccessKeyId:n=B(e.logger),Expiration:o,SecretKey:s=M(e.logger),SessionToken:i}=H(e.logger)}=await(e.client??new r(Object.assign({},e.clientConfig??{},{region:((c=e.clientConfig)==null?void 0:c.region)??((l=e.parentClientConfig)==null?void 0:l.region)}))).send(new t({CustomRoleArn:e.customRoleArn,IdentityId:e.identityId,Logins:e.logins?await T(e.logins):void 0}));return{identityId:e.identityId,accessKeyId:n,secretAccessKey:s,sessionToken:i,expiration:o}}}function B(e){throw new d("Response from Amazon Cognito contained no access key ID",{logger:e})}function H(e){throw new d("Response from Amazon Cognito contained no credentials",{logger:e})}function M(e){throw new d("Response from Amazon Cognito contained no secret key",{logger:e})}const g="IdentityIds";class L{constructor(t="aws:cognito-identity-ids"){this.dbName=t}getItem(t){return this.withObjectStore("readonly",r=>{const n=r.get(t);return new Promise(o=>{n.onerror=()=>o(null),n.onsuccess=()=>o(n.result?n.result.value:null)})}).catch(()=>null)}removeItem(t){return this.withObjectStore("readwrite",r=>{const n=r.delete(t);return new Promise((o,s)=>{n.onerror=()=>s(n.error),n.onsuccess=()=>o()})})}setItem(t,r){return this.withObjectStore("readwrite",n=>{const o=n.put({id:t,value:r});return new Promise((s,i)=>{o.onerror=()=>i(o.error),o.onsuccess=()=>s()})})}getDb(){const t=self.indexedDB.open(this.dbName,1);return new Promise((r,n)=>{t.onsuccess=()=>{r(t.result)},t.onerror=()=>{n(t.error)},t.onblocked=()=>{n(new Error("Unable to access DB"))},t.onupgradeneeded=()=>{const o=t.result;o.onerror=()=>{n(new Error("Failed to create object store"))},o.createObjectStore(g,{keyPath:"id"})}})}withObjectStore(t,r){return this.getDb().then(n=>{const o=n.transaction(g,t);return o.oncomplete=()=>n.close(),new Promise((s,i)=>{o.onerror=()=>i(o.error),s(r(o.objectStore(g)))}).catch(s=>{throw n.close(),s})})}}class W{constructor(t={}){this.store=t}getItem(t){return t in this.store?this.store[t]:null}removeItem(t){delete this.store[t]}setItem(t,r){this.store[t]=r}}const $=new W;function q(){return typeof self=="object"&&self.indexedDB?new L:typeof window=="object"&&window.localStorage?window.localStorage:$}function U({accountId:e,cache:t=q(),client:r,clientConfig:n,customRoleArn:o,identityPoolId:s,logins:i,userIdentifier:a=!i||Object.keys(i).length===0?"ANONYMOUS":void 0,logger:c,parentClientConfig:l}){c==null||c.debug("@aws-sdk/credential-provider-cognito-identity - fromCognitoIdentity");const u=a?`aws:cognito-identity-credentials:${s}:${a}`:void 0;let f=async()=>{const{GetIdCommand:m,CognitoIdentityClient:R}=await w(async()=>{const{GetIdCommand:h,CognitoIdentityClient:k}=await import("./loadCognitoIdentity-BIKsyjKh.js").then(v=>v.ah);return{GetIdCommand:h,CognitoIdentityClient:k}},__vite__mapDeps([0,1,2,3,4,5,6]),import.meta.url),b=r??new R(Object.assign({},n??{},{region:(n==null?void 0:n.region)??(l==null?void 0:l.region)}));let y=u&&await t.getItem(u);if(!y){const{IdentityId:h=F(c)}=await b.send(new m({AccountId:e,IdentityPoolId:s,Logins:i?await T(i):void 0}));y=h,u&&Promise.resolve(t.setItem(u,y)).catch(()=>{})}return f=A({client:b,customRoleArn:o,logins:i,identityId:y}),f()};return()=>f().catch(async m=>{throw u&&Promise.resolve(t.removeItem(u)).catch(()=>{}),m})}function F(e){throw new d("Response from Amazon Cognito contained no identity ID",{logger:e})}const re=e=>A({...e}),ne=e=>U({...e}),z="169.254.170.2",G="169.254.170.23",V="[fd00:ec2::23]",J=(e,t)=>{if(e.protocol!=="https:"&&!(e.hostname===z||e.hostname===G||e.hostname===V)){if(e.hostname.includes("[")){if(e.hostname==="[::1]"||e.hostname==="[0000:0000:0000:0000:0000:0000:0000:0001]")return}else{if(e.hostname==="localhost")return;const r=e.hostname.split("."),n=o=>{const s=parseInt(o,10);return 0<=s&&s<=255};if(r[0]==="127"&&n(r[1])&&n(r[2])&&n(r[3])&&r.length===4)return}throw new d(`URL not accepted. It must either be HTTPS or match one of the following:
  - loopback CIDR 127.0.0.0/8 or [::1/128]
  - ECS container host 169.254.170.2
  - EKS container host 169.254.170.23 or [fd00:ec2::23]`,{logger:t})}};function Y(e){return new O({protocol:e.protocol,hostname:e.hostname,port:Number(e.port),path:e.pathname,query:Array.from(e.searchParams.entries()).reduce((t,[r,n])=>(t[r]=n,t),{}),fragment:e.hash})}async function Q(e,t){const n=await j(e.body).transformToString();if(e.statusCode===200){const o=JSON.parse(n);if(typeof o.AccessKeyId!="string"||typeof o.SecretAccessKey!="string"||typeof o.Token!="string"||typeof o.Expiration!="string")throw new d("HTTP credential provider response not of the required format, an object matching: { AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }",{logger:t});return{accessKeyId:o.AccessKeyId,secretAccessKey:o.SecretAccessKey,sessionToken:o.Token,expiration:x(o.Expiration)}}if(e.statusCode>=400&&e.statusCode<500){let o={};try{o=JSON.parse(n)}catch{}throw Object.assign(new d(`Server responded with status: ${e.statusCode}`,{logger:t}),{Code:o.Code,Message:o.Message})}throw new d(`Server responded with status: ${e.statusCode}`,{logger:t})}const X=(e,t,r)=>async()=>{for(let n=0;n<t;++n)try{return await e()}catch{await new Promise(s=>setTimeout(s,r))}return await e()},oe=(e={})=>{var s;(s=e.logger)==null||s.debug("@aws-sdk/credential-provider-http - fromHttp");let t;const r=e.credentialsFullUri;if(r)t=r;else throw new d("No HTTP credential provider host provided.",{logger:e.logger});const n=new URL(t);J(n,e.logger);const o=new N;return X(async()=>{const i=Y(n);e.authorizationToken&&(i.headers.Authorization=e.authorizationToken);const a=await o.handle(i);return Q(a.response)},e.maxRetries??3,e.timeout??1e3)},se=e=>{let t;return async()=>{var i;(i=e.logger)==null||i.debug("@aws-sdk/credential-providers - fromTemporaryCredentials (STS)");const r={...e.params,RoleSessionName:e.params.RoleSessionName??"aws-sdk-js-"+Date.now()};if(r!=null&&r.SerialNumber){if(!e.mfaCodeProvider)throw new d("Temporary credential requires multi-factor authentication, but no MFA code callback was provided.",{tryNextLink:!1,logger:e.logger});r.TokenCode=await e.mfaCodeProvider(r==null?void 0:r.SerialNumber)}const{AssumeRoleCommand:n,STSClient:o}=await w(async()=>{const{AssumeRoleCommand:a,STSClient:c}=await import("./loadSts-D-zZVxtd.js").then(l=>l.l);return{AssumeRoleCommand:a,STSClient:c}},__vite__mapDeps([7,2,1,3,4,5]),import.meta.url);if(t||(t=new o({...e.clientConfig,credentials:e.masterCredentials})),e.clientPlugins)for(const a of e.clientPlugins)t.middlewareStack.use(a);const{Credentials:s}=await t.send(new n(r));if(!s||!s.AccessKeyId||!s.SecretAccessKey)throw new d(`Invalid response from STS.assumeRole call with role ${r.RoleArn}`,{logger:e.logger});return{accessKeyId:s.AccessKeyId,secretAccessKey:s.SecretAccessKey,sessionToken:s.SessionToken,expiration:s.Expiration,credentialScope:s.CredentialScope}}},Z=e=>async()=>{var l;(l=e.logger)==null||l.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");const{roleArn:t,roleSessionName:r,webIdentityToken:n,providerId:o,policyArns:s,policy:i,durationSeconds:a}=e;let{roleAssumerWithWebIdentity:c}=e;if(!c){const{getDefaultRoleAssumerWithWebIdentity:u}=await w(async()=>{const{getDefaultRoleAssumerWithWebIdentity:f}=await import("./index-BKMfXrzb.js");return{getDefaultRoleAssumerWithWebIdentity:f}},__vite__mapDeps([8,7,2,1,3,4,5]),import.meta.url);c=u({...e.clientConfig,credentialProviderLogger:e.logger,parentClientConfig:e.parentClientConfig},e.clientPlugins)}return c({RoleArn:t,RoleSessionName:r??`aws-sdk-js-session-${Date.now()}`,WebIdentityToken:n,ProviderId:o,PolicyArns:s,Policy:i,DurationSeconds:a})},ie=e=>Z({...e});export{re as fromCognitoIdentity,ne as fromCognitoIdentityPool,oe as fromHttp,se as fromTemporaryCredentials,ie as fromWebToken};
