import{A as y,S as R}from"./loadSts-55Ez2tRw.js";import{c as L,d as N,f as z,g as j,C as q,E as B,h as G,I as H,e as U,M as V,P as J,R as P,b as Q,a as X}from"./loadSts-55Ez2tRw.js";import{s as u}from"./index-B2KWE4bN.js";import{a as Z,C as O}from"./index-B2KWE4bN.js";import"./date-utils-CnaK6UUR.js";import"./index-Bn-ps2Oq.js";import"./noAuth-BRTlyyWt.js";import"./create-aggregated-client-sX0lpe6c.js";const C="us-east-1",T=e=>{if(typeof(e==null?void 0:e.Arn)=="string"){const t=e.Arn.split(":");if(t.length>4&&t[4]!=="")return t[4]}},g=async(e,t,o)=>{var c;const i=typeof e=="function"?await e():e,n=typeof t=="function"?await t():t;return(c=o==null?void 0:o.debug)==null||c.call(o,"@aws-sdk/client-sts::resolveRegion","accepting first of:",`${i} (provider)`,`${n} (parent client)`,`${C} (STS default)`),i??n??C},x=(e,t)=>{let o;return async i=>{var l,s,S,f;if(!o){const{logger:d=(l=e==null?void 0:e.parentClientConfig)==null?void 0:l.logger,region:A,requestHandler:m=(s=e==null?void 0:e.parentClientConfig)==null?void 0:s.requestHandler,credentialProviderLogger:E}=e,I=await g(A,(S=e==null?void 0:e.parentClientConfig)==null?void 0:S.region,E),p=!h(m);o=new t({profile:(f=e==null?void 0:e.parentClientConfig)==null?void 0:f.profile,region:I,requestHandler:p?m:void 0,logger:d})}const{Credentials:n,AssumedRoleUser:c}=await o.send(new y(i));if(!n||!n.AccessKeyId||!n.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${i.RoleArn}`);const a=T(c),r={accessKeyId:n.AccessKeyId,secretAccessKey:n.SecretAccessKey,sessionToken:n.SessionToken,expiration:n.Expiration,...n.CredentialScope&&{credentialScope:n.CredentialScope},...a&&{accountId:a}};return a&&u(r,"RESOLVED_ACCOUNT_ID","T"),u(r,"CREDENTIALS_STS_ASSUME_ROLE_WEB_ID","k"),r}},h=e=>{var t;return((t=e==null?void 0:e.metadata)==null?void 0:t.handlerProtocol)==="h2"},W=(e,t)=>t?class extends e{constructor(i){super(i);for(const n of t)this.middlewareStack.use(n)}}:e,$=(e={},t)=>x(e,W(R,t));export{Z as $Command,L as AssumeRoleCommand,N as AssumeRoleResponseFilterSensitiveLog,y as AssumeRoleWithWebIdentityCommand,z as AssumeRoleWithWebIdentityRequestFilterSensitiveLog,j as AssumeRoleWithWebIdentityResponseFilterSensitiveLog,q as CredentialsFilterSensitiveLog,B as ExpiredTokenException,G as IDPCommunicationErrorException,H as IDPRejectedClaimException,U as InvalidIdentityTokenException,V as MalformedPolicyDocumentException,J as PackedPolicyTooLargeException,P as RegionDisabledException,Q as STS,R as STSClient,X as STSServiceException,O as __Client,$ as getDefaultRoleAssumerWithWebIdentity};
