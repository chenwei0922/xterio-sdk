import{c as p,A as y,a as I,s as R,d as W,S as g}from"./loadSts-BilfnEcK.js";import{e as B,i as G,C as H,E as N,g as V,I as J,h as L,f as Q,M as X,P as Y,R as Z,b as U}from"./loadSts-BilfnEcK.js";import"./lazy-json-DuyQp4sm.js";import{C as h,g as E,a as b}from"./index-BcIgHOsi.js";import{b as ee}from"./index-BcIgHOsi.js";import"./noAuth-BRTlyyWt.js";import"./index-BqQtutl2.js";class x extends h.classBuilder().ep(p).m(function(t,i,o,n){return[E(o,this.serialize,this.deserialize),b(o,t.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","AssumeRoleWithWebIdentity",{}).n("STSClient","AssumeRoleWithWebIdentityCommand").f(y,I).ser(R).de(W).build(){}const u="us-east-1",T=e=>{if(typeof(e==null?void 0:e.Arn)=="string"){const t=e.Arn.split(":");if(t.length>4&&t[4]!=="")return t[4]}},w=async(e,t,i)=>{var s;const o=typeof e=="function"?await e():e,n=typeof t=="function"?await t():t;return(s=i==null?void 0:i.debug)==null||s.call(i,"@aws-sdk/client-sts::resolveRegion","accepting first of:",`${o} (provider)`,`${n} (parent client)`,`${u} (STS default)`),o??n??u},k=(e,t)=>{let i;return async o=>{var c,r,l;if(!i){const{logger:d=(c=e==null?void 0:e.parentClientConfig)==null?void 0:c.logger,region:S,requestHandler:m=(r=e==null?void 0:e.parentClientConfig)==null?void 0:r.requestHandler,credentialProviderLogger:C}=e,f=await w(S,(l=e==null?void 0:e.parentClientConfig)==null?void 0:l.region,C),A=!D(m);i=new t({region:f,requestHandler:A?m:void 0,logger:d})}const{Credentials:n,AssumedRoleUser:s}=await i.send(new x(o));if(!n||!n.AccessKeyId||!n.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${o.RoleArn}`);const a=T(s);return{accessKeyId:n.AccessKeyId,secretAccessKey:n.SecretAccessKey,sessionToken:n.SessionToken,expiration:n.Expiration,...n.CredentialScope&&{credentialScope:n.CredentialScope},...a&&{accountId:a}}}},D=e=>{var t;return((t=e==null?void 0:e.metadata)==null?void 0:t.handlerProtocol)==="h2"},v=(e,t)=>t?class extends e{constructor(o){super(o);for(const n of t)this.middlewareStack.use(n)}}:e,_=(e={},t)=>k(e,v(g,t));export{h as $Command,B as AssumeRoleCommand,G as AssumeRoleResponseFilterSensitiveLog,x as AssumeRoleWithWebIdentityCommand,y as AssumeRoleWithWebIdentityRequestFilterSensitiveLog,I as AssumeRoleWithWebIdentityResponseFilterSensitiveLog,H as CredentialsFilterSensitiveLog,N as ExpiredTokenException,V as IDPCommunicationErrorException,J as IDPRejectedClaimException,L as InvalidAuthorizationMessageException,Q as InvalidIdentityTokenException,X as MalformedPolicyDocumentException,Y as PackedPolicyTooLargeException,Z as RegionDisabledException,g as STSClient,U as STSServiceException,ee as __Client,_ as getDefaultRoleAssumerWithWebIdentity};
